<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技術</title>
    <link>https://qavit.github.io/notebook/cs/index.html</link>
    <description></description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://qavit.github.io/notebook/cs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git</title>
      <link>https://qavit.github.io/notebook/cs/git/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://qavit.github.io/notebook/cs/git/index.html</guid>
      <description>[!quote] 1 Git is a free and open source distributed [[version control]] system designed to handle everything from small to very large projects with speed and efficiency.&#xA;[!quote] github.com/git/git Git - fast, scalable, distributed revision control system&#xA;[!quote] 維基百科 git 是一個分散式版本控制系統，最初由林納斯・托瓦茲（Linus Torvalds）創作，於 2005 年以 [[GPL]] 授權條款釋出。最初目的是為了更好地管理 [[Linux]] 核心開發而設計。&#xA;使用儲存庫（repository）管理項目 克隆（clone）項目以在本地副本上工作 透過預存（staging）和 提交（commiting）來控制和追蹤更改 分支（branch）和合併（merge）允許處理項目的不同部分和版本 將專案的最新版本拉取（pull）到本機副本 將本地更新推送（push）到主項目 My version &amp; config $ git --version git version 2.39.3 (Apple Git-146) $ git config -l credential.</description>
    </item>
    <item>
      <title>Python 資料分析</title>
      <link>https://qavit.github.io/notebook/cs/b-python-da/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://qavit.github.io/notebook/cs/b-python-da/index.html</guid>
      <description>本書筆記暫時存放於同一檔案。&#xA;第一章 寫在前面 1.1 這本書在講什麼 這本書講 Python 中操作、處理、清理資料的各種細節。 我的目標是介紹 Python 程式語言、以及相關的資料導向函式庫和工具。 本書的重點不是介紹資料分析方法 何謂資料？資料是「結構化數據」，例如 表格或試算表。每個欄可以為不同的資料型態。儲存在關聯式資料庫或是以 tab 或逗號分隔的文字檔案（tsv、csv），多屬於這種。 多維度陣列（矩陣） key 欄位互相關聯的多個資料表 均等或不均等的時間間隔序列 … 1.2 為什麼用 Python 做資料分析 在直譯式語言中，基於歷史和文化的各種原因，Python 已坐擁巨大且活躍的科學計算與資料分析社群。 近年來因為 Python 對函式庫的改良，使其成為資料分析工作的熱門選擇。 競爭者：R、MATLAB、SAS、Stata⋯⋯ 再加上一般軟體工程的綜合實力，是建置資料應用程式的絕佳選擇。（能用一個語言完成所有事，就不需要兩個語言） Python 很容易整合 C、C++ 以及 Fortran 程式碼。 Python 不適合高同步、多執行緒的應用程式。 因為 Python 有 GIL（global interpreter lock），防止直譯其同時執行超過一個命令。 不過，只要不經常和 Python 物件相互存取，可以在 Python 的 C Extension 中使用原生的多執行緒，這樣就可以平行處理而不會被 GIL 限制。 1.3 重要的 Python 函式庫 p.4&#xA;[[NumPy]] 是 Numerical Python 的簡稱 Python 中數值計算的重要基石 為多數的科學應用提供資料結構、演算法以及所需的函式庫年和 特點 快速、有效率的多維陣列物件 ndarray 陣列的 elementwise 計算或 inter-array 數值計算 從磁碟讀寫陣列資料集 線性代數運算、傅立葉轉換、亂數逞生氣 成熟的 C API，能做 Python extension，也讓 C/C++ 存取 NumPy 的資料結構與計算功能 [[Pandas]] 提供高階的資料結構和函式 設計用來快速、簡單、有效處理有結構的資料或是表格資料 主要物件： DataFrame：以表格、欄位為主的資料結構，有行和列標籤 Series：一維標籤陣列 結合 NumPy 高效陣列計算的特性、以及試算比和關聯式資料庫（如 SQL）的性資料操作能力 提供複雜的索引功能，使得重構、切片、切塊、聚合和選擇資料子集合等工作變得容易 pandas 的名稱有兩個來源，一格式 panel data 的延伸，另一個是 Python data analysis 的縮寫。 [[Matplotlib]] Python 用來產生繪圖和二為資料視覺會最常用的函式庫。 最早是 John H.</description>
    </item>
    <item>
      <title>Shell 變數操作</title>
      <link>https://qavit.github.io/notebook/cs/shell-var/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://qavit.github.io/notebook/cs/shell-var/index.html</guid>
      <description> 變數是用來儲存數值或字串的實體。 在 Shell 中宣告變數時，等號左右不能有空格。 使用變數時，要加上 $ 符號。 變數可分為區域變數（使用 local）、環境變數（使用 export 或 local） 列出所有變數用 set，列出環境變數用 env 建立檔案 test.sh&#xA;#!/bin/bash hello=&#34;Hello world&#34; echo $Hello執行 test.sh&#xA;&gt; sh Hello world Hello world Shell 的變數沒有分類型 </description>
    </item>
  </channel>
</rss>