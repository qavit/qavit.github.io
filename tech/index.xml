<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Techniques</title>
    <link>http://localhost:1313/tech/index.html</link>
    <description></description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 29 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mermaid</title>
      <link>http://localhost:1313/tech/mermaid/index.html</link>
      <pubDate>Thu, 29 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tech/mermaid/index.html</guid>
      <description>Mermaid 是一種用來生成各種圖表和流程圖的簡潔語法。它是基於 JavaScript，可以直接在 Markdown 文件中渲染。&#xA;https://mermaid.js.org/ 流程圖 語法 → https://mermaid.js.org/syntax/flowchart.html&#xA;```mermaid graph TD A[使用魔鏡] --&gt; B{我是不是很帥？} B -- 是 --&gt; C[很好，繼續保養] B -- 否 --&gt; D[去整形] ``` graph TD A[使用魔鏡] --&gt; B{我是不是很帥？} B -- 是 --&gt; C[很好，繼續保養] B -- 否 --&gt; D[去整形]解釋：&#xA;graph TD 表示從上到下（Top to Down）的流程圖。 方括號 [] 表示方形節點，大括號 {} 表示菱形節點（判斷），請參考以下 #節點形狀。 --&gt; 表示節點之間的連接線，可以填入文字，請參考以下 #連接線形狀。 節點樣式 節點樣式 語法 圓角 id(round edge) 方形 id[square] stadium-shaped id([stadium-shaped]) 菱形 id{rhombus} 平行線 id[||| parallel |||] 圓柱 id[(cylindrical)] 子流程 id[[subroutine]] 圓圈 id((circle)) 不對稱 id&gt;asymmetric] 六邊形 id{{hexgon}} 平行四邊形 id[/parallelogram/] 平行四邊形（顛倒） id[\parallelogram alt\] 梯形 id[/trapezoid\] 梯形（顛倒） id[\trapezoid/] 雙重圓圈 id(((double circle))) graph TD A(&#34;(round edge)&#34;) --&gt; B[&#34;[square]&#34;] B -.</description>
    </item>
    <item>
      <title>days_between</title>
      <link>http://localhost:1313/tech/days-between/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tech/days-between/index.html</guid>
      <description>#!/usr/bin/env python3 import argparse from datetime import datetime, timedelta def calculate_days(date1, date2, business_days=False): date_format = &#34;%Y-%m-%d&#34; today_str = datetime.now().strftime(date_format) # Convert &#39;today&#39; to the current date if date1.lower() == &#34;today&#34;: date1 = today_str if date2.lower() == &#34;today&#34;: date2 = today_str try: start_date = datetime.strptime(date1, date_format) end_date = datetime.strptime(date2, date_format) except ValueError as e: print(f&#34;Date format error: {e}&#34;) return if business_days: days_diff = 0 current_date = start_date while current_date &lt;= end_date: if current_date.</description>
    </item>
    <item>
      <title>How to add new line to YAML file</title>
      <link>http://localhost:1313/tech/how-to-add-new-line-to-yaml-file/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tech/how-to-add-new-line-to-yaml-file/index.html</guid>
      <description>Question How to use command line to add a new line to a yaml file?&#xA;ChatGPT’s Answer To add a new line to a YAML file from the command line, you can use various tools available in Unix-like systems such as echo, sed, awk, or perl. Here are a few methods to append a new line to a YAML file:&#xA;1. Using echo and tee If you want to append a new line to the end of the YAML file, you can use echo combined with tee:</description>
    </item>
    <item>
      <title>How to install ipykernel in conda environments</title>
      <link>http://localhost:1313/tech/how-to-install-ipykernel-in-conda-environments/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tech/how-to-install-ipykernel-in-conda-environments/index.html</guid>
      <description>Question What does these commands do?&#xA;conda install -n myenv ipykernel python -m ipykernel install --user --name myenv ChatGPT’s answer The commands you’ve provided relate to setting up a Python environment with Conda and configuring a Jupyter Notebook kernel to use this environment. Here’s a detailed breakdown of each command and its function:&#xA;1. conda install -n myenv ipykernel conda: This is the package and environment management system used with Anaconda and Miniconda.</description>
    </item>
    <item>
      <title>My Conda cheatsheet</title>
      <link>http://localhost:1313/tech/conda-cheatsheet/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tech/conda-cheatsheet/index.html</guid>
      <description>This is my [conda] cheatsheet.&#xA;Package management List installed packages conda list conda list --show-channel-urls Install a package conda install PKGNAME conda install PKGNAME=3.1.4 conda install CHANNELNAME::PKGNAME Update a package conda update --all conda update PKGNAME conda upgrade PKGNAME Uninstall a package conda uninstall PKGNAME conda remove PKGNAME Virtual environment Create a new environment conda create --name myenv python=3.8 Activate/deactivate an environment Activate an environment on Windows (this also works on MacOS)</description>
    </item>
    <item>
      <title>用 Conda 管理虛擬環境</title>
      <link>http://localhost:1313/tech/conda/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tech/conda/index.html</guid>
      <description>Conda 是一款開放原始碼、跨平台的 虛擬環境管理和軟體套件管理工具，特別適合用於科學計算和資料科學。Conda 不僅支援 Python，也支援 R 語言。&#xA;安裝 要安裝 Conda，你可以下載和安裝 Anaconda 或 Miniconda。這兩者之間的主要差異在於 Anaconda 包含了大量的預安裝套件，而 Miniconda 是一個輕量版，只包含 Conda 和Python。&#xA;使用安裝檔 前往 Miniconda 官網 ，根據你的作業系統選擇合適的版本進行下載。 按照官方的安裝指南，執行安裝檔，並按照指示完成安裝。 base 環境 當你安裝 Conda 後，會自動建立一個叫做 base 的環境，並設為默認環境。base 包含了 Conda 的執行所需的所有軟體套件。&#xA;虛擬環境管理 基礎操作 建立新環境 建立一個名為 myenv 的 Python 3.11 環境：&#xA;conda create --name myenv python=3.11 確定環境的安裝位置 conda info --base 像我是在 macOS 系統上使用 Homebrew 安裝 Miniconda，我的 Conda 環境安裝位置在 /usr/local/Caskroom/miniconda/base。&#xA;啟動環境 啟動名為 myenv 的環境&#xA;conda activate myenv 啟動之後，你應該會看到終端機的提示字元（prompt）前面出現</description>
    </item>
  </channel>
</rss>