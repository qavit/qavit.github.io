<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>興大AI班</title>
    <link>http://localhost:1313/nchu-ai/index.html</link>
    <description>2024 年 7 月到 9 月，我參加國立中興大學的 AI 人工智慧程式設計與應用開發人才培訓班。&#xA;雖然冠上人工智慧之名，這個訓練班的內容其實包山包海，包含了：&#xA;Python 程式設計 機器學習 深度學習 智慧物聯網（AIoT） Web 應用程式開發與部署 新興 AI 工具 雲端伺服器 網路爬蟲 然後，學最多的其實是小組專案。我們小組做的是辨識美國手語拼字的小遊戲——Swordle，可以參考我們的 GitHub。</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 31 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/nchu-ai/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kmeans demo</title>
      <link>http://localhost:1313/nchu-ai/kmeans-app/index.html</link>
      <pubDate>Sat, 31 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/nchu-ai/kmeans-app/index.html</guid>
      <description></description>
    </item>
    <item>
      <title>Apache</title>
      <link>http://localhost:1313/nchu-ai/apache/index.html</link>
      <pubDate>Thu, 29 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/nchu-ai/apache/index.html</guid>
      <description>Apache 是一款跨平台、開放原始碼的網頁伺服器軟體1。&#xA;Apache HTTP Server Documentation 核心功能 Apache 的虛擬主機（virtual host）允許一台伺服器主機上同時運行多個網站。 Apache 有模組化（modularized）的結構，例如在 Django 專案中使用的 mod_wsgi 模組。 安裝 在 Ubuntu 上使用 apt 命令安裝 Apache&#xA;sudo apt-get update # 更新軟體套件 sudo apt install apache2 # 安裝 Apache sudo systemctl status apache2 # 檢查 Apache 是否成功啟動 HTTP 設定檔 Apache 虛擬主機的設定檔通常位於 /etc/apache2/ 目錄下&#xA;/etc/apache2/sites-available 存放「可用的」設定檔 /etc/apache2/sites-enabled 存放「啟用的」設定檔 Apache 的設定檔使用一種特殊語法，它有以下特點&#xA;指令（Directives） 區塊（block）的語法是使用尖括號 (&lt; &gt;) 來包圍關鍵字，某種程度上類似於 HTML 標籤。常見的區塊有 &lt;VirtualHost&gt; 區塊是虛擬主機設定，允許在同一台伺服器上運行多個網站或應用程式 &lt;Directory&gt; 區塊用來設定伺服器中不同目錄的訪問權限和屬性。 &lt;Files&gt; 區塊用來設定特定類型或名稱的檔案。 &lt;Location&gt; 區塊用來設定與 URL 路徑相關的配置。 常見結構 全域設定：通常放在配置文件的開頭部分，用來設定伺服器級別的全域選項。 虛擬主機設定：用來配置多個網站或應用程式在同一台伺服器上運行。 模組設定：啟用或配置 Apache 的模組功能，例如 SSL 模組、URL 重寫模組等。 目錄設定： 註解使用 # 來標示。 一個簡單的虛擬主機</description>
    </item>
    <item>
      <title>Apache 設定檔解析</title>
      <link>http://localhost:1313/nchu-ai/apache-conf/index.html</link>
      <pubDate>Thu, 29 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/nchu-ai/apache-conf/index.html</guid>
      <description>全域設定 通常放在配置文件的開頭部分，用來設定伺服器級別的全域選項。&#xA;ServerName localhost Listen 80 虛擬主機設定 用來配置多個網站或應用程式在同一台伺服器上運行。&#xA;&lt;VirtualHost *:80&gt; ServerAdmin webmaster@localhost DocumentRoot /var/www/html ServerName example.com &lt;/VirtualHost&gt; 模組設定 啟用或配置 Apache 的模組功能，例如 SSL 模組、URL 重寫模組等。&#xA;LoadModule ssl_module modules/mod_ssl.so LoadModule rewrite_module modules/mod_rewrite.so 目錄設定 用來設定伺服器中不同目錄的訪問權限和屬性。&#xA;&lt;Directory &#34;/var/www/html&#34;&gt; AllowOverride None Require all granted &lt;/Directory&gt; </description>
    </item>
    <item>
      <title>Seaborn</title>
      <link>http://localhost:1313/nchu-ai/seaborn/index.html</link>
      <pubDate>Thu, 29 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/nchu-ai/seaborn/index.html</guid>
      <description>Seaborn 是一個基於 [[Matplotlib]]</description>
    </item>
    <item>
      <title>WSGI</title>
      <link>http://localhost:1313/nchu-ai/wsgi/index.html</link>
      <pubDate>Thu, 29 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/nchu-ai/wsgi/index.html</guid>
      <description>WSGI（Web Server Gateway Interface）是 Python 應用程式與網頁伺服器之間的一個標準介面，定義了應用程式如何與伺服器進行通訊。&#xA;mod_wsgi 假設你有一個位於 /var/www/myproject 目錄下的 Django 專案，你可以在 Apache 的配置文件中進行如下設定：&#xA;&lt;VirtualHost *:80&gt; ServerAdmin admin@mydomain.com DocumentRoot /var/www/myproject # 指定 WSGI 應用程式入口點 WSGIDaemonProcess myproject python-path=/var/www/myproject python-home=/var/www/myproject/venv WSGIProcessGroup myproject WSGIScriptAlias / /var/www/myproject/myproject/wsgi.py &lt;Directory /var/www/myproject&gt; &lt;Files wsgi.py&gt; Require all granted &lt;/Files&gt; &lt;/Directory&gt; ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined &lt;/VirtualHost&gt; </description>
    </item>
    <item>
      <title>YOLO 物件偵測模型</title>
      <link>http://localhost:1313/nchu-ai/yolo/index.html</link>
      <pubDate>Thu, 29 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/nchu-ai/yolo/index.html</guid>
      <description>YOLO：從基礎到最新發展的物件偵測技術 物件偵測技術在近幾年的深度學習領域中有了巨大的發展，而 YOLO（You Only Look Once）系列模型以其高效的即時物件偵測能力，成為了這一領域的重要技術之一。本文將深入介紹 YOLO 的基本原理、技術演進以及如何在實際應用中使用這些模型，特別是最新版本 YOLOv8 的新特性。&#xA;YOLO 的基本概念 YOLO 是一種基於深度學習的物件偵測技術，其最大特色在於其高效性。YOLO 的名稱 “You Only Look Once” 強調了模型在只需一次前向傳播（forward pass）下就能識別出圖像中的所有物體及其位置。這種設計使得 YOLO 特別適合用於對時間延遲非常敏感的應用場景，例如自動駕駛和監控系統等。&#xA;YOLO 透過將輸入圖像劃分為多個網格，每個網格負責偵測其中的物體。通過比對物體的形狀、顏色等特徵，結合深度學習模型預先學習到的知識，YOLO 能夠快速、準確地識別圖像中的物體。&#xA;YOLO 的演進歷史 自 2015 年由 Joseph Redmon 首次提出以來，YOLO 系列模型經歷了多次重大升級和改進：&#xA;YOLO v1（2015）：引入了即時物件檢測的概念，雖然速度快，但在小物件偵測和處理相近物件方面存在一定的局限。 YOLO v2（2016）：改進了小物件的偵測能力，並提升了模型的準確性。 YOLO v3（2018）：引入了多尺度預測架構，進一步平衡了速度和準確性。 YOLO v4（2020）：由台灣學者王健堯及其團隊與俄羅斯學者 Alexey 共同開發，新增了骨幹網絡和特徵提取技術，顯著提升了模型的速度和精確度。 YOLO v5（2020）：雖然並非官方版本，但由商業公司 Ultralytics 基於 PyTorch 框架開發，簡化了模型的架構和部署過程。 YOLO v6（2022）：進一步提升了平均精度（AP）和推理速度，是 YOLO v5 的兩倍快。 YOLO v7（2022）：在性能和速度上取得了顯著突破，成為當時 YOLO 家族中最強大的模型。 YOLOv8（2023）：最新版本的 YOLO 支持在邊緣裝置上運行，適用於影像分類、物件偵測、實例分割、姿勢預測等多種 AI 視覺任務，並引入了無錨檢測等新技術。 這些版本的演進展示了 YOLO 系列模型在提高物件偵測準確性、速度和實用性方面的持續努力。&#xA;YOLOv8 的新特性和應用 YOLOv8 作為 YOLO 系列的最新版本，在技術上進行了多項改進，特別是針對邊緣裝置的應用進行了優化：</description>
    </item>
    <item>
      <title>Matplotlib</title>
      <link>http://localhost:1313/nchu-ai/matplotlib/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/nchu-ai/matplotlib/index.html</guid>
      <description>[[Seaborn]]</description>
    </item>
  </channel>
</rss>